project(DICE)
set(USE_LONG_INT_DEF false)
set(USE_SIMPLE_PRECISION_DEF false)
set(USE_TR1_DEF true)
set(USE_CPP11_DEF true)
set(USE_PTHREADS_DEF true)
set(USE_OPENMP_DEF true)
set(USE_QUAD_MATH_DEF true)
set(USE_NATIVE_FLAGS_DEF true)

# default path
#set(GMP_DIR_DEF "/home/thierry/libs/")
#set(BOOST_DIR_DEF "/home/thierry/soft/boost_1_57_0/")
#set(FFTW3_DIR_DEF "/home/thierry/data/libs2/")
#set(PARMETIS_DIR_DEF "/home/thierry/libs/")

#These are automatically added supplementary compilation flags
SET(CXX_DEBUG_OPTS "-g -O0 -fno-inline-functions -fsanitize=address  ")#-vec-report3 -guide -fsanitize=thread
SET(CXX_OPTS "-g -Wall -Wno-comment  -fno-common -Wpointer-arith -Wwrite-strings -fno-math-errno -fno-strict-aliasing -funroll-loops -DNDEBUG -O3") 
#SET(CXX_OPTS "${CXX_OPTS}  ")  #-vec-report2 -march=corei7-avx -restrict -prof-gen -prof-dir~/prog/dice/build/profdata -march=corei7-avx -fno-omit-frame-pointer

########## NO MODIFICATION NEEDED BELOW THIS LINE ##########

SET( CMAKE_CXX_FLAGS_CUSTOM_DEF "-O3 -msse2 -mavx -std=gnu++11 -DNDEBUG" CACHE STRING
  "default flags for custom builds"
  FORCE )

#Default build type: Release, Debug or Custom 
if (NOT CMAKE_BUILD_TYPE)
  set (CMAKE_BUILD_TYPE Release)
endif()

set (DICE_VERSION_MAJOR 0)
set (DICE_VERSION_MINOR 9)
set (DICE_VERSION_BUILD 45)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

add_definitions(
  -DVER_MAJOR=${DICE_VERSION_MAJOR} 
  -DVER_MINOR=${DICE_VERSION_MINOR} 
  -DVER_BUILD=${DICE_VERSION_BUILD})

#set(AMR_ROOT_LEVEL_2D ${AMR_ROOT_LEVEL_2D_DEF} CACHE binary "Refinement level of 2D AMR grid's root.")
#add_definitions(-DD_AMR_ROOT_LEVEL_2D ${AMR_ROOT_LEVEL_2D_DEF})
#set(AMR_ROOT_LEVEL_3D ${AMR_ROOT_LEVEL_3D_DEF} CACHE binary "Refinement level of 3D AMR grid's root.")
#add_definitions(-DD_AMR_ROOT_LEVEL_3D ${AMR_ROOT_LEVEL_3D_DEF})

set(CMAKE_CXX_FLAGS_CUSTOM ${CMAKE_CXX_FLAGS_CUSTOM_DEF} CACHE binary "custom build flags")
set(USE_LONG_INT ${USE_LONG_INT_DEF} CACHE binary "use long integers")
set(USE_SIMPLE_PRECISION ${USE_SIMPLE_PRECISION_DEF} CACHE binary "use simple precision floats")
set(USE_TR1 ${USE_TR1_DEF} CACHE binary "use TR1 C++")
set(USE_CPP11 ${USE_CPP11_DEF} CACHE binary "use CPP11 C++")
set(USE_NATIVE_FLAGS ${USE_NATIVE_FLAGS_DEF} CACHE binary "use C++ native architecture flags")
set(USE_PTHREADS ${USE_PTHREADS_DEF} CACHE binary "use pthreads")
set(USE_OPENMP ${USE_OPENMP_DEF} CACHE binary "use OpenMP")
set(USE_QUAD_MATH ${USE_QUAD_MATH_DEF} CACHE binary "use quadmath")
set(FFTW3_DIR ${FFTW3_DIR_DEF} CACHE PATH "path to fftw3")
set(PARMETIS_DIR ${PARMETIS_DIR_DEF} CACHE PATH "path to parmetis")
set(BOOST_DIR ${BOOST_DIR_DEF} CACHE PATH "path to boost")
set(GMP_DIR ${GMP_DIR_DEF} CACHE PATH "path to GMP")
set_property(CACHE USE_PTHREADS PROPERTY STRINGS true false)
set_property(CACHE USE_OPENMP PROPERTY STRINGS true false)

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
#SET(CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}" CACHE PATH "DICE install prefix" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS  true)
LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/modules")
if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" VERSION_GREATER 2.6.3)
  if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" VERSION_GREATER 2.8.3)
    cmake_policy(VERSION 2.8.4)
  else()
    cmake_policy(VERSION 2.6.3)
  endif()
endif()

include (${PROJECT_SOURCE_DIR}/modules/cmessage.cmake)

#Also look for static libraries ...
set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})

#SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-msse2 -mavx -g -Wa,-adhls -save-temps")
#SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-Q -v -DFORTIFY_SOURCE=2 ")
#SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -std=c++0x -mavx")

#SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++0x -g -Wall -Wshadow -fno-common -ansi -pedantic -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings")

if(NOT NO_MPI)
  SET(MPI_CXX_COMPILER ${CMAKE_CXX_COMPILER})
  SET(MPI_C_COMPILER ${CMAKE_C_COMPILER})
  FIND_PACKAGE(MPI)
endif()

if(MPI_CXX_FOUND)
  #INCLUDE(CMakeForceCompiler)
  #CMAKE_FORCE_CXX_COMPILER(${MPI_CXX_COMPILER} "MPI C++ Compiler")
  add_definitions(-DUSE_MPI)
  SET(CMAKE_EXE_LINKER_FLAGS ${MPI_CXX_LINK_FLAG} ${CMAKE_EXE_LINKER_FLAGS} )
  SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${MPI_CXX_COMPILE_FLAGS})
else()
  #add_definitions(-DNO_MPI)
endif()

if (PROFILE)
  SET( CXX_FLAGS_PROF  " -prof-gen ")#-prof-dir ./profdata" )
  SET( CXX_FLAGS_PROF  " -prof-use -opt-report -opt-report-phase=pgo -ipo")
  
  #SET( CXX_FLAGS_PROF  " -pg" )
  #SET( EXE_LINKER_FLAGS_PROF  " -pg" )
endif()

if (USE_LIKWID)
  add_definitions(-DLIKWID_PERFMON)
  add_definitions(-DUSE_LIKWID)
  link_libraries("-llikwid -pthread")
endif()

FIND_PACKAGE(GooglePerfTools)

if (USE_TCMALLOC)
  if (TCMALLOC_LIBRARY) 
    include_directories(${GOOGLE_PERFTOOLS_INCLUDE_DIR})
    link_libraries(${TCMALLOC_LIBRARY})
    #link_libraries(-ltcmalloc)
  else()
    cmessage(STATUS_RED " TCMalloc not found ! (required by -DUSE_TCMALLOC=true)")
    cmessage(STATUS_RED " Path to TCMalloc can be enforced with '-DPERFTOOLS_DIR=...'")
    #message(FATAL_ERROR "cannot continue ...")
  endif()
endif()

if (USE_PPROF)
  if (GOOGLE_PERFTOOLS_FOUND)
    include_directories(${GOOGLE_PERFTOOLS_INCLUDE_DIR})
    add_definitions(-DUSE_PPROF)
    link_libraries(${PROFILER_LIBRARY})
    #link_libraries("-lprofiler")
  else()
    cmessage(STATUS_RED " Google perftools not found ! (required by -DUSE_PPROF=true)")
    cmessage(STATUS_RED " Path to google pertools can be enforced with '-DPERFTOOLS_DIR=...'")
    #message(FATAL_ERROR "cannot continue ...")
  endif()
endif()

if (USE_LONG_INT)
  add_definitions(-DUSELONGINT)
endif()

if (USE_SIMPLE_PRECISION)
  add_definitions(-DUSESIMPLEPRECISION)
endif()

if (BOOST_DIR)
  set(BOOST_ROOT ${BOOST_DIR})
endif()
FIND_PACKAGE(Boost 1.53.0 REQUIRED)
IF (Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIR}) 
  add_definitions( "-DHAVE_BOOST" )  
ENDIF()

FIND_PACKAGE(GMP REQUIRED)
IF (GMP_FOUND)
  include_directories(${GMP_INCLUDE_DIR}) 
  add_definitions( "-DHAVE_GMP" )  
  link_libraries(-L${GMP_LIBRARY_DIR} -lgmp)
ENDIF()

FIND_PACKAGE(QD)
IF (QD_FOUND)
  include_directories(${QD_INCLUDE_DIR}) 
  add_definitions( "-DHAVE_QD" )  
  link_libraries(-L${QD_LIBRARY_DIR} -lqd)
ENDIF()

#FIND_PACKAGE(ARMADILLO)
#IF (ARMADILLO_FOUND)
#  include_directories(${ARMADILLO_INCLUDE_DIR}) 
#  add_definitions( "-DHAVE_ARMADILLO" )  
#  link_libraries(-L${ARMADILLO_LIB_DIR} -larmadillo)
#ENDIF()

FIND_PACKAGE(Eigen3)
IF (EIGEN3_FOUND)
  include_directories(${EIGEN3_INCLUDE_DIR})
  add_definitions( "-DHAVE_EIGEN3" )  
ENDIF()

if (USE_CPP11)
  FIND_PACKAGE(CPP11) 
else()
  set(CPP11_FOUND false)
endif()

FIND_PACKAGE(NativeFlags) 
if (USE_NATIVE_FLAGS)
  SET(CXX_OPTS "${CXX_OPTS} ${NATIVE_CXX_FLAGS}")
else()
  SET(NATIVE_FLAGS_FOUND false)
endif()

if (USE_TR1)
  FIND_PACKAGE(TR1)
endif()

if (USE_PTHREADS OR USE_OPENMP)
  add_definitions(-DUSE_PTHREADS)
  link_libraries(-lpthread)
endif()

#if (USE_OPENMP)
#FIND_PACKAGE(OpenMP)
#message( STATUS "Find openmp flags: $OpenMP_CXX_FLAGS" )
#endif()

message(STATUS "Using the following compiler: ${CMAKE_CXX_COMPILER_ID}")
if(CMAKE_CXX_COMPILER_ID MATCHES "(C|c?)lang")#if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  message(STATUS "Clang found")
  add_definitions ("-Wno-unused-local-typedefs")
  SET(OPENMP_FLAG "-openmp") # (-openmp) this is odd, is there something wrong with my version of clang++ ????
elseif(CMAKE_CXX_COMPILER_ID MATCHES "(I|i?)ntel")#("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  SET(OPENMP_FLAG "-qopenmp")
else()
  SET(OPENMP_FLAG "-fopenmp")
endif()

if (USE_OPENMP)  
  add_definitions(-DUSE_OPENMP)
  SET(CXX_OPTS "${CXX_OPTS} ${OPENMP_FLAG}")
  SET(CXX_DEBUG_OPTS "${CXX_DEBUG_OPTS} ${OPENMP_FLAG}")
  link_libraries("${OPENMP_FLAG}")
else()
  SET(WARNING_SUPRESS_FLAGS "${WARNING_SUPRESS_FLAGS} -Wno-unknown-pragmas")
endif()

if(NOT NO_SPARSEHASH)  
  FIND_PACKAGE(SparseHash)
  if (SPARSEHASH_FOUND)    
    include_directories(${SPARSEHASH_INCLUDE_DIR})
    add_definitions(-DHAVE_SPARSEHASH)
  else ()
    #add_definitions(-DNO_SPARSEHASH)
  endif()
endif()

if(NOT NO_FFTW3)
  FIND_PACKAGE(FFTW3)
endif()

if (FFTW_FOUND)

  if(FFTW_THREADS_FOUND)
    add_definitions(-DHAVE_FFTW3_THREADS)
    include_directories(${FFTW_THREADS_INCLUDE_DIR})
    link_libraries(${FFTW_THREADS_LIBRARIES})# -lfftw3_threads) 
  endif()

  if(MPI_CXX_FOUND)
    if(FFTW_MPI_FOUND)
      add_definitions(-DHAVE_FFTW3_MPI)
      include_directories(${FFTW_MPI_INCLUDE_DIR})
      link_libraries(${FFTW_MPI_LIBRARIES})# -lfftw3_mpi) 
    endif()
  endif()

  add_definitions(-DHAVE_FFTW3)
  include_directories(${FFTW_INCLUDE_DIR})
  link_libraries(${FFTW_LIBRARIES})# -lfftw3)
  

endif()

#FIND_PACKAGE(P4EST)
#if(P4EST_FOUND)
#  include_directories(${P4EST_INCLUDE_DIR})
#  link_libraries(${P4EST_LIB_DIR})    
#endif()

if(MPI_CXX_FOUND) 
  FIND_PACKAGE(ParMETIS)
  IF (PARMETIS_FOUND)    
    include_directories(${PARMETIS_INCLUDE_DIRS})
    link_libraries(${PARMETIS_LIBRARIES})    
  ENDIF()
else()
  #librt is needed for clock_gettime, but only on OSX
  if(NOT APPLE)
    link_libraries(-lrt)
  endif()
endif()

SET(CXX_FLAGS_CPP11 "-std=c++0x")
if (CPP11_FOUND)
  add_definitions( "-DHAVE_CPP11" )  
  SET(CXX_FLAGS_CPP11 "-std=c++11")
endif()

if (TR1_UNORDERED_MAP_FOUND)
  add_definitions(-DHAVE_TR1)
  if (TR1_HEADER_PREFIX) 
    add_definitions(-DHAVE_TR1_HEADER_PREFIX)
  endif()
  if (TR1_NAMESPACE_PREFIX) 
    add_definitions(-DHAVE_TR1_NAMESPACE_PREFIX)
  endif()
endif()

#execute_process(COMMAND ${CMAKE_CXX_COMPILER} -v
#  COMMAND grep "icpc version"
#  OUTPUT_VARIABLE rv
#  ERROR_VARIABLE rv)
#if("icpc version" STRLESS ${rv})
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  SET(WARNING_SUPRESS_FLAGS "${WARNING_SUPRESS_FLAGS} -wd175")  
  message(STATUS "Found intel compiler, disabling spurious warnings (-wd175)")
  message(STATUS "Found intel compiler, enforing precise floating point arithmetic (-fp-model precise)")
  SET(CXX_OPTS "${CXX_OPTS} -fp-model precise")
  SET(CXX_DEBUG_OPTS "${CXX_DEBUG_OPTS} -fp-model precise")
endif()

if (CMAKE_COMPILER_IS_GNUCXX)
  SET(WARNING_SUPRESS_FLAGS "${WARNING_SUPRESS_FLAGS} -Wno-sign-compare -Wno-unused-local-typedefs -Wno-unknown-pragmas -fdiagnostics-show-option")
  if (GCXX_VERSION VERSION_LESS 5.0.0)
     SET(WARNING_SUPRESS_FLAGS "${WARNING_SUPRESS_FLAGS} -Wno-deprecated-register")
  endif()
  message(STATUS "Found GNU compiler, disabling sign compare warnings (-Wno-sign-compare)")
endif()

MACRO(LIST_LENGTH var)
  SET(entries)
  FOREACH(e ${ARGN})
    SET(entries "${entries}.")
  ENDFOREACH(e)
  STRING(LENGTH ${entries} ${var})
ENDMACRO(LIST_LENGTH)

if (CMAKE_COMPILER_IS_GNUCXX)
  execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion
    OUTPUT_VARIABLE GCXX_VERSION)
  string(REGEX MATCHALL "[0-9]+" GCXX_VERSION_COMPONENTS ${GCXX_VERSION})

  LIST_LENGTH(length ${GCXX_VERSION_COMPONENTS})
  
  list(GET GCXX_VERSION_COMPONENTS 0 GCXX_MAJOR)

  if(length GREATER 1)
    list(GET GCXX_VERSION_COMPONENTS 1 GCXX_MINOR)
  else()
    SET(GCXX_MINOR 0)
  endif()
  
  if(length GREATER 2)
    list(GET GCXX_VERSION_COMPONENTS 2 GCXX_BUILD)
  else()
    SET(GCXX_BUILD 0)
  endif()

  message(STATUS "GNU compiler found : g++ v${GCXX_MAJOR}.${GCXX_MINOR}.${GCXX_BUILD}")
  
  if (GCXX_VERSION VERSION_LESS 4.3.3 )
    SET(GNU_PARALLEL_SORT false)
  else() 
    if (USE_OPENMP)
      SET(GNU_PARALLEL_SORT true)
      add_definitions(-DUSE_GNU_PSORT) 
    else()
      SET(GNU_PARALLEL_SORT false)
    endif()
  endif()

  if (GCXX_VERSION VERSION_LESS 4.6.0 )
    SET(HAVE_QUAD_MATH false)
  else()
    SET(HAVE_QUAD_MATH true)
    if (USE_QUAD_MATH)
      add_definitions(-DHAVE_QUADMATH)# -fext-numeric-literals)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fext-numeric-literals")
      link_libraries(-lquadmath)
    endif()
  endif()

  #if (GCXX_VERSION VERSION_LESS 4.7.0 )
  #  SET(CXX_FLAGS_CPP11 "-std=c++0x")
  #endif()

else()  
  SET(GNU_PARALLEL_SORT false)
  SET(HAVE_QUAD_MATH false)
endif() 

if(CMAKE_BUILD_TYPE MATCHES "Debug")
  message(STATUS "Supressed warnings : ${WARNING_SUPRESS_FLAGS}")
  message(STATUS "Extra CXX flags : ${CXX_FLAGS_CPP11} ${CXX_DEBUG_OPTS} ${CXX_FLAGS_PROF}")
  message(STATUS "Extra linker flags : ${EXE_LINKER_FLAGS_PROF} ${CMAKE_EXE_LINKER_FLAGS_EXTRA}")
  message(STATUS "User specified flags : ${CXX_FLAGS_EXTRA}")

  #-O0 -fno-inline-functions
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX_FLAGS_EXTRA} ${WARNING_SUPRESS_FLAGS} ${CXX_FLAGS_CPP11} ${CXX_DEBUG_OPTS} ${CXX_FLAGS_PROF}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXE_LINKER_FLAGS_EXTRA} ${EXE_LINKER_FLAGS_PROF}")  

else()

  message(STATUS "Supressed warnings : ${WARNING_SUPRESS_FLAGS}")
  message(STATUS "Extra CXX flags : ${CXX_FLAGS_CPP11} ${CXX_OPTS} ${CXX_FLAGS_PROF}")
  message(STATUS "Extra linker flags : ${EXE_LINKER_FLAGS_PROF} ${EXE_LINKER_FLAGS_EXTRA}")
  message(STATUS "User specified flags : ${CXX_FLAGS_EXTRA}")
  
  # -std=c++0x -g -Wall -fno-common -Wpointer-arith -Wwrite-strings 
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX_FLAGS_EXTRA} ${WARNING_SUPRESS_FLAGS} ${CXX_FLAGS_CPP11} ${CXX_OPTS} ${CXX_FLAGS_PROF}") #-Wcast-qual -Weffc++
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXE_LINKER_FLAGS_EXTRA} ${EXE_LINKER_FLAGS_PROF} ${EXE_LINKER_OPTS}")    
endif()

message(STATUS "The following compilation flags will be used: ${CMAKE_CXX_FLAGS}")
message(STATUS "The following linker flags will be used: ${CMAKE_EXE_LINKER_FLAGS}")

FIND_PACKAGE(AdvancedFeatures)
IF(NOT NULLPTR_FOUND)
  add_definitions( "-DHAVE_NO_NULLPTR" )
endif()
if (OMP_ATOMIC_CAPTURE)
  add_definition( "-DHAVE_OMP_ATOMIC_CAPTURE")
endif()

SET(TARGETS_LIST "")
SET(NOT_BUILT_TARGETS_LIST "")
SET(DISABLED_FEATURES_LIST "")

set(MAIN_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/")
include_directories(${MAIN_INCLUDE_DIR})

IF (NOT TESTS_ONLY)
  add_subdirectory ("solvers")
  add_subdirectory ("tools")
ENDIF()

IF (TESTS OR TESTS_ONLY)
  add_subdirectory ("tests")
ENDIF()

#include(cotire)
#cotire(${TARGETS_LIST})

# build a CPack driven installer package
include (InstallRequiredSystemLibraries)
set (CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
set (CPACK_PACKAGE_VERSION_MAJOR "${DICE_VERSION_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${DICE_VERSION_MINOR}")
set (CPACK_PACKAGE_VERSION_PATCH "${DICE_VERSION_BUILD}")

include (CPack)

message (STATUS "")
cmessage (STATUS_CYAN "------------------------------------")
cmessage (STATUS_CYAN "***   Report for DICE v${DICE_VERSION_MAJOR}.${DICE_VERSION_MINOR}.${DICE_VERSION_BUILD}    ***")
cmessage (STATUS_CYAN "------------------------------------")
message (STATUS "")

if (NOT USE_PTHREADS)
  cmessage(STATUS_RED "   * Threads (pthread) are DISABLED (enable with '-DUSE_PTHREADS=true').") 
  if (USE_OPENMP)
    message(STATUS "     Note that 'pthread' will still be used to ensure thread safety as OPENMP is enabled.") 
  endif()
else()
   cmessage(STATUS_GREEN "   * Threads (pthread) are ENABLED (disable with '-DUSE_PTHREADS=false').") 
endif()

if (NOT USE_OPENMP)
  cmessage(STATUS_RED "   * OpenMP support is DISABLED (enable with '-DUSE_OPENMP=true').") 
  LIST(APPEND DISABLED_FEATURES_LIST all:openMP)
else()
  cmessage(STATUS_GREEN "   * OpenMP support is ENABLED (disable with '-DUSE_OPENMP=false').") 
endif()

#if (NOT GNU_PARALLEL_SORT)
#  if (NOT USE_OPENMP) 
#    message(STATUS "   * PARALLEL SORT is DISABLED (enable with '-DUSE_OPENMP=true', requires gcc4.3.3+).") 
#  else()
#    message(STATUS "   * PARALLEL SORT is DISABLED (requires gcc4.3.3+, current is v${GCXX_MAJOR}.${GCXX_MINOR}.${GCXX_BUILD}).") 
#  endif()
#else()
#  message(STATUS "   * PARALLEL SORT is ENABLED (disable with '-DUSE_OPENMP=false').") 
#endif()

if (USE_LIKWID)
  cmessage(STATUS_GREEN "   * Adding likwid perfmon instrumentation.")
else()
  message(STATUS "   * No likwid perfmon instrumentation required. (enable with -DUSE_LIKWID=true)")
endif()

if (USE_PPROF)
  cmessage(STATUS_GREEN "   * Linking to google performence profiler in '${PROFILER_LIBRARY}'.")
else()
  message(STATUS "   * No linking to google performence tools required. (enable with -DUSE_PPROF=true)")
endif()

if (USE_TCMALLOC) 
  cmessage(STATUS_GREEN "   * TCMalloc was found in '${TCMALLOC_LIBRARY}'.")
else()
  message(STATUS "   * TCMalloc library was not required. (enable with -DUSE_TCMALLOC=true).")
endif()
message(STATUS "     Path to TCMALLOC and GoogleProfiler can be enforced with '-DPERFTOOLS_DIR=...'")



if (NOT USE_QUAD_MATH)
  if (NOT HAVE_QUAD_MATH) 
    cmessage(STATUS_RED "   * QUAD_MATH support is NOT POSSIBLE (requires gcc4.6.0+, current is v${GCXX_MAJOR}.${GCXX_MINOR}.${GCXX_BUILD}).") 
  else()
    cmessage(STATUS_RED "   * QUAD_MATH support is DISABLED (enable with '-DUSE_QUAD_MATH=true', requires gcc4.6.0+).") 
  endif()
else()
  cmessage(STATUS_GREEN "   * QUAD_MATH support is ENABLED (disable with '-DUSE_QUAD_MATH=false').") 
endif()

if (USE_LONG_INT)
  cmessage(STATUS_RED "   * Long integers are ENABLED (disable with '-DUSE_LONG_INT=false')")
  message(STATUS "     It is recommanded to disable unless you are using VERY large LOCAL datasets (>4E9 elements per node).")
else()
  LIST(APPEND DISABLED_FEATURES_LIST all:long_int)
  cmessage(STATUS_GREEN "   * Long integers are DISABLED (enable with '-DUSE_LONG_INT=true')")
  message(STATUS "     Enable only if you are using VERY large LOCAL datasets (>4E9 elements per node).")
endif()

#if (NOT USE_SIMPLE_PRECISION)
#  message(STATUS "   * Double precision ENABLED (disable with '-DUSE_SIMPLE_PRECISION=true')")
#else()
#  LIST(APPEND DISABLED_FEATURES_LIST all:simple_precision)
#  message(STATUS "   * Double precision computations DISABLED (enable with '-DUSE_SIMPLE_PRECISION=false')")
#endif()

if (Boost_FOUND)
  cmessage(STATUS_GREEN "   * Boost was found in '${Boost_INCLUDE_DIR}'.")
else()
  cmessage(STATUS_RED "   * Boost was NOT found or version too old (require at least v1.57.0).")
  message(STATUS "     Path to Boost can be enforced with '-DBOOST_DIR=path/to/boost'")
  #message(FATAL_ERROR " Boost v1.57.0+ is required for arbitrary precision computations ! (download it from http://www.boost.org/users/download/)")
  LIST(APPEND DISABLED_FEATURES_LIST all:BOOST)
endif()
message(STATUS "     Path to Boost can be enforced with '-DBOOST_DIR=path/to/boost'")

if (GMP_FOUND)
  cmessage(STATUS_GREEN "   * GMP was found in '${GMP_LIBRARY}'.")
else()
  cmessage(STATUS_RED "   * GMP was NOT found. This is required for arbitrary precision computations !")
  message(STATUS "     Path to GMP can be enforced with '-DGMP_DIR=path/to/GMP'")
  #message(FATAL_ERROR "GMP is REQUIRED (library source can be found in 'external/' directory).")
endif()
message(STATUS "     Path to GMP can be enforced with '-DGMP_DIR=path/to/GMP'")

if (QD_FOUND)
  cmessage(STATUS_GREEN "   * QD was found in '${QD_LIBRARY}'.")
else()
  cmessage(STATUS_RED "   * QD was NOT found. This library is recommanded and would speed up computations !")
  message(STATUS "     Path to QD can be enforced with '-DQD_DIR=path/to/QD'")
  #message(FATAL_ERROR "libQD is REQUIRED (library source can be found in 'external/' directory).")
endif()
message(STATUS "     Path to QD can be enforced with '-DQD_DIR=path/to/QD'")

if (ARMADILLO_FOUND)
  cmessage(STATUS_GREEN "   * ARMADILLO was found in '${ARMADILLO_LIB_DIR}'.")
else()
  cmessage(STATUS_GREEN "   * ARMADILLO was NOT found and we don't care ;).")
endif()
message(STATUS "     Path to ARMADILLO can be enforced with '-DARMADILLO_DIR=path/to/armadillo'")

if (EIGEN3_FOUND)
  cmessage(STATUS_GREEN "   * EIGEN v${EIGEN3_VERSION} was found in '${EIGEN3_INCLUDE_DIR}'.")
else()
  cmessage(STATUS_RED "   * EIGEN3 was NOT found. This is required for advanced linear algebra operation !")
  message(STATUS "     Path to EIGEN3 can be enforced with '-DEIGEN3_DIR=path/to/eigen'")
  #message(FATAL_ERROR "EIGEN3 is REQUIRED (library source can be found in 'external/' directory).")  
endif()
message(STATUS "     Path to EIGEN3 can be enforced with '-DEIGEN3_DIR=path/to/eigen'")

if (CPP11_FOUND)
  cmessage(STATUS_GREEN "   * C++11 standard compatibility found.")
  message(STATUS        "     In case of incompatibility, disable support with '-DUSE_CPP11=false'.")
else()
  cmessage(STATUS_RED "   * C++11 standard is NOT supported by this compiler or support was disabled.")
  if (NOT USE_CPP11)
    message(STATUS        "     Enable support checking with '-DUSE_CPP11=true'.")
  endif()
endif()

if (NATIVE_FLAGS_FOUND)
  cmessage(STATUS_GREEN "   * Native architecture flags found ('${NATIVE_CXX_FLAGS}').")
  message(STATUS        "     In case you want to compile for a different architecture, disable support with '-DUSE_NATIVE_FLAGS=false'.")
else()
  cmessage(STATUS_RED "   * Native architecture flags NOT found or support was disabled.")
  if (NOT USE_NATIVE_FLAGS)
    message(STATUS        "     Enable support checking with '-DUSE_NATIVE_FLAGS=true'.")
  endif()
endif()

if (USE_TR1)
  if (NOT TR1_UNORDERED_MAP_FOUND)
    LIST(APPEND DISABLED_FEATURES_LIST all:tr1)
    cmessage(STATUS_RED "   * TR1 C++ instructions were not found.")
  else()
    cmessage(STATUS_GREEN "   * TR1 C++ instructions are ENABLED (disable with '-DUSE_TR1=false').")
  endif()
else()
  LIST(APPEND DISABLED_FEATURES_LIST all:tr1)
  cmessage(STATUS_RED "   * TR1 C++ instructions are DISABLED (enable with '-DUSE_TR1=true').")
endif()

if (SPARSEHASH_FOUND)
  cmessage(STATUS_GREEN "   * SparseHash was found in '${SPARSEHASH_INCLUDE_DIR}' (disable with '-DNO_SPARSEHASH=true').")
else()
  cmessage(STATUS_RED "   * SparseHash was NOT found.")
  #message(STATUS "        Try: '-DSPARSEHASH_DIR=${DIST}/external' where ${DIST} is the directory")
endif()
message(STATUS "     Path to SPARSEHASH can be enforced with '-DSPARSEHASH_DIR=...'")
message(STATUS "     where 'sparsehash.h' is in '{SPARSEHASH_DIR}/include/sparsehash/internal/' or '{SPARSEHASH_DIR}/sparsehash/internal/'")

#if (P4EST_FOUND)
#  message(STATUS "   * p4est was found in '${P4EST_LIB_DIR}'.")
#  message(STATUS "     Path to p4est can be enforced with '-DP4EST_DIR=path/to/p4est'.")
#else()
#  cmessage(STATUS_RED "   * p4est was NOT found.")
#  message(STATUS "     Path to p4est can be enforced with '-DP4EST_DIR=path/to/p4est'.")
#  # message(FATAL_ERROR " Sorry, but p4est is required. Please install it ...")
#endif()

if (FFTW_FOUND)
  cmessage(STATUS_GREEN "   * FFTW3 was found in '${FFTW_LIBRARY}'.")
  if (FFTW_THREADS_FOUND)    
    cmessage(STATUS_GREEN "     -> FFTW3-THREADS was found.")
  else()
    cmessage(STATUS_RED "     -> FFTW3-THREADS was NOT found. FFTW will NOT be threaded !")
    LIST(APPEND DISABLED_FEATURES_LIST all:FFTW3-threads)
  endif()
  
  if(MPI_CXX_FOUND)
    if (FFTW_MPI_FOUND)
      set (FFTW_FOUND_OPTION " THREADS")
      cmessage(STATUS_GREEN "     -> FFTW3-MPI was found.")
    else()
      cmessage(STATUS_RED "     -> FFTW3-MPI was NOT found. FFTW will NOT use MPI !")
      message(STATUS "     Path to FFTW can be enforced with '-DFFTW3_DIR=path/to/FFTW3'")
      #message(FATAL_ERROR "FFTW3-MPI is REQUIRED when compiling with MPI (library source can be found in 'external/' directory).")
    endif()
  endif()
  
else()
  if (NO_FFTW3)
    cmessage(STATUS_RED "   * FFTW3 support DISABLED (enable with '-DNO_FFTW3=false').")      
  else ()
    cmessage(STATUS_RED "   * FFTW3 was NOT FOUND.")
    message(STATUS "     Path to FFTW can be enforced with '-DFFTW3_DIR=path/to/FFTW3'")
    message(FATAL_ERROR "FFTW3 is REQUIRED (library source can be found in 'external/' directory).")
  endif()
  LIST(APPEND DISABLED_FEATURES_LIST all:FFTW3)
endif()
message(STATUS "     Path to FFTW can be enforced with '-DFFTW3_DIR=path/to/FFTW3'")

if(MPI_CXX_FOUND)
  cmessage(STATUS_GREEN "   * MPI was found (using ${MPI_CXX_COMPILER}).")
  message(STATUS "     Disable MPI support with '-DNO_MPI=true'.")
#  message(STATUS "     You can also force a specific MPI compiler with:")
#  message(STATUS "      -DMPI_CXX_COMPILER=<NAME> (e.g with <NAME> = mpicc)" )
else()
  if(NO_MPI)
    cmessage(STATUS_RED "   * MPI support DISABLED (enable with '-DNO_MPI=false').")    
  else()
    cmessage(STATUS_RED "   * MPI was NOT FOUND. ")
    message(STATUS "      Set MPI C++ compiler with -DCMAKE_CXX_COMPILER=<NAME> (e.g with <NAME> = /usr/bin/mpicxx)" )
  endif()
  LIST(APPEND DISABLED_FEATURES_LIST all:MPI)
endif()

if(MPI_CXX_FOUND)
  if (PARMETIS_FOUND)   
    cmessage(STATUS_GREEN "   * ParMETIS v${PARMETIS_VERSION_STRING} was found in '${PARMETIS_LIBRARIES}'.")
  else()
    cmessage(STATUS_RED "   * METIS and/or ParMETIS was NOT FOUND.")
  endif()
  message(STATUS "     Path to ParMetis can be enforced with '-DPARMETIS_DIR=path/to/parmetis'")
  if (NOT PARMETIS_FOUND)
    #message(FATAL_ERROR "METIS and ParMETIS are REQUIRED when compiling with MPI (library source can be found in 'external/' directory).")
  endif()
else()
  message(STATUS "   * ParMETIS was ignored as MPI is not present.")
endif()
message (STATUS "")
message(STATUS "Note: a default path to all libraries can be set with '-DCMAKE_PREFIX_PATH=/default/path/'")

message(STATUS "")
cmessage(STATUS_BLUE " The following binaries will be built:")
cmessage(STATUS_GREEN "  ${TARGETS_LIST}")
if (DEFINED NOT_BUILT_TARGETS_LIST)
  cmessage(STATUS_RED " The following binaries will NOT be built:")
  cmessage(STATUS_RED "  ${NOT_BUILT_TARGETS_LIST}")
endif()
if (DEFINED DISABLED_FEATURES_LIST)
  cmessage(STATUS_BLUE " The following features are DISABLED:")
  cmessage(STATUS_RED "  ${DISABLED_FEATURES_LIST}")
endif()

message(STATUS " ")
cmessage(STATUS_BLUE " Selected C++ compiler: ${CMAKE_CXX_COMPILER}")
#if(MPI_CXX_FOUND) 
#  message(STATUS "  change MPI compiler with -DMPI_CXX_COMPILER=<NAME>.")
#else()
  message(STATUS "  change C++ compiler with -DCMAKE_CXX_COMPILER=<NAME>.")
#endif()
cmessage(STATUS_BLUE " Mode: ${CMAKE_BUILD_TYPE}")

message(STATUS "  Set compile mode with '-DCMAKE_BUILD_TYPE={Debug,Release,Custom}',")
message(STATUS "  Additional user defined flags are set with '-DCXX_FLAGS_EXTRA=...' ")
message(STATUS "  Additional user defined linker flags are set with '-DEXE_LINKER_FLAGS_EXTRA=...' ")
message(STATUS "  Custom build flags are set with '-DCMAKE_CXX_FLAGS_CUSTOM=...' ")
message(STATUS "  Custom build linker flags are set with '-DCMAKE_EXE_LINKER_FLAGS_CUSTOM=...' ")
cmessage(STATUS_BLUE " DICE will be installed in: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  The default install path can be changed with -DCMAKE_INSTALL_PREFIX=<PATH>")
message (STATUS "")

# fatal errors handled from here

if (USE_TCMALLOC)
  if (TCMALLOC_LIBRARY)
  else()
    cmessage(STATUS_RED " TCMalloc not found ! (required by -DUSE_TCMALLOC=true)")
    cmessage(STATUS_RED " Path to TCMalloc can be enforced with '-DPERFTOOLS_DIR=...'")
    message(FATAL_ERROR "cannot continue ...")
  endif()
endif()

if (USE_PPROF)
  if (GOOGLE_PERFTOOLS_FOUND)
  else ()
    cmessage(STATUS_RED " Google perftools not found ! (required by -DUSE_PPROF=true)")
    cmessage(STATUS_RED " Path to google pertools can be enforced with '-DPERFTOOLS_DIR=...'")
    message(FATAL_ERROR "cannot continue ...")
  endif()
endif()

if (NOT Boost_FOUND)
  message(FATAL_ERROR " Boost v1.57.0+ is required for arbitrary precision computations ! (download it from http://www.boost.org/users/download/)")
endif()

if (NOT GMP_FOUND)
  message(FATAL_ERROR "GMP is REQUIRED (library source can be found in 'external/' directory).")
endif()

if (NOT QD_FOUND)
  message(FATAL_ERROR "libQD is REQUIRED (library source can be found in 'external/' directory).")
endif()

if (NOT EIGEN3_FOUND)
  message(FATAL_ERROR "EIGEN3 is REQUIRED (library source can be found in 'external/' directory).")  
endif()

if (FFTW_FOUND)
  if(MPI_CXX_FOUND)
    if (NOT FFTW_MPI_FOUND)
      message(FATAL_ERROR "FFTW3-MPI is REQUIRED when compiling with MPI (library source can be found in 'external/' directory).")
    endif()
  endif()
else()
  if (NO_FFTW3)
  else()
    message(FATAL_ERROR "FFTW3 is REQUIRED (library source can be found in 'external/' directory).")
  endif()
endif()

if(MPI_CXX_FOUND)
  if (NOT PARMETIS_FOUND)
    message(FATAL_ERROR "METIS and ParMETIS are REQUIRED when compiling with MPI (library source can be found in 'external/' directory).")
  endif()
endif()

cmessage (STATUS_CYAN "-----------------------------------")
cmessage (STATUS_CYAN "***        END OF REPORT        ***")
cmessage (STATUS_CYAN "-----------------------------------")
message (STATUS "")


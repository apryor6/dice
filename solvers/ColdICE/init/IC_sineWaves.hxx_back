#ifndef __IC_SINE_WAVES_HXX__
#define __IC_SINE_WAVES_HXX__

#include <math.h>

#include <tools/helpers/helpers.hxx>
#include <tools/MPI/mpiCommunication.hxx>
#include <mesh/tesselation/simplicialGrid.hxx>
#include "initialConditionsInterface.hxx"

template <class M>
class IC_sineWaves : 
  public InitialConditionsInterfaceT<M>
{
private:
  static const int NDIM=M::NDIM;
  static const int NDIM_W=M::NDIM_W;

public:
  typedef InitialConditionsInterfaceT<M> Interface;
  typedef typename Interface::ImplicitTesselation ImplicitTesselation;
  typedef typename Interface::Params Params;
  typedef typename Interface::Vertex Vertex;

  static std::string name() {return "sineWaves";}
  std::string getName() const {return name();}

  template <class PM, class R>
  IC_sineWaves(PM &paramsManager, R *reader, 
	       cvps::MpiCommunication *com=nullptr)
  {
    parse(paramsManager,reader);
  }

  void initialize(const double *x0, const double *delta, double t, 
		  const Units &units, int pass)
  {
    std::copy_n(x0,NDIM,x0_);
    std::copy_n(delta,NDIM,delta_);    
  }

  void displace(double *coords, double &density, Vertex *v)
  {
    double x[NDIM];
    for (int i=0;i<NDIM;++i) 
      x[i]=(coords[i]-x0_[i])/delta_[i];
    
     for (int w=0;w<nWaves_;++w)
       {
	 for (int i=0;i<NDIM;++i) 
	   {	     
	     double dx=sin(2.0L*M_PI*(x[i]+shift_[w][i]))*amplitude_[w][i];
	   
	     coords[i]+=dx;
	     coords[i+NDIM]+=dx*velFactor_[w][i]+velVector_[w][i];	     
	   }
       }
  }

  Params getParams()
  {
    Params p;
    std::copy_n(sgParams.x0,NDIM,&p.x0.front());
    std::copy_n(sgParams.delta,NDIM,&p.delta.front());
    return p;
  }

  ImplicitTesselation *createImplicitTesselation()
  { 
    SimplicialGrid *sg = new SimplicialGrid(sgParams);
    return reinterpret_cast<ImplicitTesselation*>(sg);
  }

  bool useLagrangianMass() const {return true;}
private:
  typedef typename ImplicitTesselation::Cell Cell;
  typedef cvps::SimplicialGridT<NDIM,NDIM_W,Cell,M::IS_PERIODIC> SimplicialGrid;
  typedef typename SimplicialGrid::Params SimplicialGridParams;
  
  SimplicialGridParams sgParams;

  template <class PM, class R>
  void parse(PM &paramsManager, R *reader)
  {
    sgParams.parse(reader,paramsManager,Interface::parserCategory());    

    nWaves_ = 1;
    nWaves_ = paramsManager.
      get("nWaves",Interface::parserCategory(),nWaves_,
	  reader,PM::FILE_FIRST,
	  "Number of waves along each dimensions");

    for (int w=0;w<nWaves_;++w)
      {
	amplitude_[w][0] = (w>0)?amplitude_[w-1][0]:0.2;
	amplitude_[w][0] = paramsManager.
	  get("amplitude",Interface::parserCategory(),amplitude_[w][0],w*NDIM+0,
	      reader,PM::FILE_FIRST,
	      "Amplitude of the sine waves");

	for (int i=1;i<NDIM;++i)
	  {
	    amplitude_[w][i] = (w>0)?amplitude_[w-1][i]:amplitude_[w][0];
	    amplitude_[w][i] = paramsManager.
	      get("amplitude",Interface::parserCategory(),amplitude_[w][i],w*NDIM+i,
		  reader,PM::FILE_FIRST,
		  "Amplitude of the sine waves");
	  }

	shift_[w][0] = (w>0)?shift_[w-1][0]:0;
	shift_[w][0] = paramsManager.
	  get("shift",Interface::parserCategory(),shift_[w][0],w*NDIM+0,
	      reader,PM::FILE_FIRST,
	      "Sine wave coordinates shift in [0,1]");

	for (int i=1;i<NDIM;++i)
	  {
	    shift_[w][i] = (w>0)?shift_[w-1][i]:shift_[w][0];
	    shift_[w][i] = paramsManager.
	      get("shift",Interface::parserCategory(),shift_[w][i],w*NDIM+i,
		  reader,PM::FILE_FIRST,
		  "Sine wave coordinates shift in [0,1]");
	  }

	velFactor_[w][0] = (w>0)?velFactor_[w-1][0]:0;
	velFactor_[w][0] = paramsManager.
	  get("velFactor",Interface::parserCategory(),velFactor_[w][0],w*NDIM+0,
	      reader,PM::FILE_FIRST,
	      "Velocity to displacement ratio");

	for (int i=1;i<NDIM;++i)
	  {
	    velFactor_[w][i] = (w>0)?velFactor_[w-1][i]:velFactor_[w][0];
	    velFactor_[w][i] = paramsManager.
	      get("velFactor",Interface::parserCategory(),velFactor_[w][i],w*NDIM+i,
		  reader,PM::FILE_FIRST,
		  "Velocity to displacement ratio");
	  }

	velVector_[w][0] = (w>0)?velVector_[w-1][0]:0;
	velVector_[w][0] = paramsManager.
	  get("velVector",Interface::parserCategory(),velVector_[w][0],w*NDIM+0,
	      reader,PM::FILE_FIRST,
	      "Global velocity vector");

	for (int i=1;i<NDIM;++i)
	  {
	    velVector_[w][i] = (w>0)?velVector_[w-1][i]:velVector_[w][0];
	    velVector_[w][i] = paramsManager.
	      get("velVector",Interface::parserCategory(),velVector_[w][i],w*NDIM+i,
		  reader,PM::FILE_FIRST,
		  "Global velocity vector");
	  }
      }
  }

  int nWaves_;
  double amplitude_[10][3];  
  double shift_[10][3];
  //double scale_[10][3];
  double velFactor_[10][3];
  double velVector_[10][3];
  double x0_[3];
  double delta_[3];  
};

#endif
